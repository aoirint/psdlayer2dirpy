name: Release

on:
  push:
    branches:
      - main
  release:
    types:
      - created
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11.2'
  IMAGE_NAME: aoirint/psdlayer2dirpy
  IMAGE_TAG: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}
  VERSION: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || '0.0.0' }}

jobs:
  pypi-push:
    if: github.event.release.tag_name != ''
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
            pip3 install -r requirements.txt
            pip3 install wheel

      - name: Replace version
        run: |
          sed -i "s/__VERSION__ = '0.0.0'/__VERSION__ = '${{ env.VERSION }}'/" aoirint_psdlayer2dirpy/__init__.py
          sed -i "s/version = "0.0.0"/version = "${{ env.VERSION }}"/" pyproject.toml

      - name: Build Package
        run: python3 setup.py sdist bdist_wheel

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  docker-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Deploy Docker image
        uses: docker/build-push-action@v3
        env:
          IMAGE_NAME_AND_TAG: ${{ format('{0}:{1}', env.IMAGE_NAME, env.IMAGE_TAG) }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          push: true
          tags: ${{ env.IMAGE_NAME_AND_TAG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME_AND_TAG }}-buildcache,mode=max
